#!/usr/bin/env python
"""Convert yml list to markdown table."""
import yaml
import collections.abc

try:
    from yaml import CLoader as Loader
except ImportError:
    from yaml import Loader
import os
import sys
import argparse

base_dir = os.path.dirname(os.path.abspath(os.path.curdir))


def load_file(filename):
    """Load file to a python dict or list."""
    data = yaml.load(filename, Loader=Loader)
    return data


def flatten(d, parent_key="", sep="_"):
    """Flatten value if is a List or dict and return dict."""
    items = []
    for k, v in d.items():
        new_key = parent_key + sep + k if parent_key else k
        if isinstance(v, collections.abc.MutableMapping):
            items.extend(flatten(v, new_key, sep=sep).items())
        else:
            items.append((new_key, v))
    return dict(items)


def list2str(lst):
    """Return str from lst."""
    tmp = "|".join([str(lv) for lv in lst])
    return f"|{tmp}|"


def gen_md(data):
    """Generate Mardown representation of data."""
    content = []
    if isinstance(data, dict):
        keys = list(flatten(data).keys())
        headersep = [" ----- " for k in keys]
        values = list(flatten(data).values())
        content.append(list2str(keys))
        content.append(list2str(headersep))
        content.append(list2str(values))
        return "\n".join(content)
    elif isinstance(data, list):
        keys = list(flatten(data[0]).keys())
        headersep = [" ----- " for k in keys]
        content.append(list2str(keys))
        content.append(list2str(headersep))
        [content.append(list2str(list(flatten(v).values()))) for v in data]
        return "\n".join(content)


def yml2md(args):
    """Return yml to markdown representation."""
    data = load_file(args.filename)
    print(gen_md(data))
    return


def main():
    """Run main program."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-f",
        "--filename",
        action="store",
        dest="filename",
        help="YAML file to render to markdown",
        type=argparse.FileType("r"),
        metavar="PATH",
        default=sys.stdin,
    )
    parser.set_defaults(func=yml2md)
    args = parser.parse_args()

    args.func(args)
    return


if __name__ == "__main__":
    main()
